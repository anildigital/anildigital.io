;; Analyzed by ClojureScript 0.0-2760
{:defs {uri {:protocol-inline nil, :name cognitect.transit/uri, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 11, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 313, :end-line 313, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a URI from a string.", :test true}, ->t18980 {:protocol-inline nil, :protocols #{cognitect.transit/Object cljs.core/IMeta cljs.core/IWithMeta}, :name cognitect.transit/->t18980, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :method-params ([verbose-handler-fn str-rep-fn rep-fn tag-fn write-handler meta18981]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :methods ({:tag cognitect.transit/t18980, :variadic false, :max-fixed-arity 6}), :line 259, :max-fixed-arity 6, :fn-var true, :arglists (quote ([verbose-handler-fn str-rep-fn rep-fn tag-fn write-handler meta18981])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, uuid {:protocol-inline nil, :name cognitect.transit/uuid, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 323, :end-line 323, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a UUID from a string.", :test true}, t18980 {:num-fields 6, :protocols #{cognitect.transit/Object cljs.core/IMeta cljs.core/IWithMeta}, :name cognitect.transit/t18980, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :type true, :anonymous true, :column 6, :line 259, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, KeywordHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/KeywordHandler, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 34, :type true, :column 19, :line 123, :record false, :end-line 123, :skip-protocol-flag nil}, VectorHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/VectorHandler, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 33, :type true, :column 19, :line 159, :record false, :end-line 159, :skip-protocol-flag nil}, bigint? {:protocol-inline nil, :name cognitect.transit/bigint?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 298, :end-line 298, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit big integer value, false otherwise.", :test true}, MapBuilder {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/MapBuilder, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 30, :type true, :column 19, :line 75, :record false, :end-line 75, :skip-protocol-flag nil}, ->UUIDHandler {:no-doc true, :protocol-inline nil, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->UUIDHandler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 31, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag cognitect.transit/UUIDHandler, :variadic false, :max-fixed-arity 0}), :line 168, :end-line 168, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, ->MapBuilder {:no-doc true, :protocol-inline nil, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->MapBuilder, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag cognitect.transit/MapBuilder, :variadic false, :max-fixed-arity 0}), :line 75, :end-line 75, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, ->KeywordHandler {:no-doc true, :protocol-inline nil, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->KeywordHandler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 34, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag cognitect.transit/KeywordHandler, :variadic false, :max-fixed-arity 0}), :line 123, :end-line 123, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, binary {:protocol-inline nil, :name cognitect.transit/binary, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 333, :end-line 333, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a transit binary value. s should be base64 encoded\n   string.", :test true}, ->SymbolHandler {:no-doc true, :protocol-inline nil, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->SymbolHandler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 33, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag cognitect.transit/SymbolHandler, :variadic false, :max-fixed-arity 0}), :line 129, :end-line 129, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, write-handler {:protocol-inline nil, :name cognitect.transit/write-handler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 21, :method-params ([tag-fn rep-fn] [tag-fn rep-fn str-rep-fn] [tag-fn rep-fn str-rep-fn verbose-handler-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cognitect.transit/t18977, :variadic false, :max-fixed-arity 2} {:tag cognitect.transit/t18977, :variadic false, :max-fixed-arity 3} {:tag cognitect.transit/t18980, :variadic false, :max-fixed-arity 4}), :line 250, :end-line 250, :max-fixed-arity 4, :fn-var true, :arglists (quote ([tag-fn rep-fn] [tag-fn rep-fn str-rep-fn] [tag-fn rep-fn str-rep-fn verbose-handler-fn])), :doc "Creates a transit write handler whose tag, rep,\n   stringRep, and verboseWriteHandler methods\n   invoke the provided fns.", :test true}, VectorBuilder {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/VectorBuilder, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 33, :type true, :column 19, :line 82, :record false, :end-line 82, :skip-protocol-flag nil}, read {:protocol-inline nil, :name cognitect.transit/read, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 12, :method-params ([r str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([r str])), :doc "Read a transit encoded string into ClojureScript values given a \n   transit reader.", :test true}, uri? {:protocol-inline nil, :name cognitect.transit/uri?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 318, :end-line 318, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit URI value, false otherwise.", :test true}, binary? {:protocol-inline nil, :name cognitect.transit/binary?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 339, :end-line 339, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit binary value, false otherwise.", :test true}, ->MapHandler {:no-doc true, :protocol-inline nil, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->MapHandler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag cognitect.transit/MapHandler, :variadic false, :max-fixed-arity 0}), :line 144, :end-line 144, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, MapHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/MapHandler, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 30, :type true, :column 19, :line 144, :record false, :end-line 144, :skip-protocol-flag nil}, bigint {:protocol-inline nil, :name cognitect.transit/bigint, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 293, :end-line 293, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a big integer from a string.", :test true}, bigdec? {:protocol-inline nil, :name cognitect.transit/bigdec?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 308, :end-line 308, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit big decimal value, false otherwise.", :test true}, SetHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/SetHandler, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 30, :type true, :column 19, :line 150, :record false, :end-line 150, :skip-protocol-flag nil}, SymbolHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/SymbolHandler, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 33, :type true, :column 19, :line 129, :record false, :end-line 129, :skip-protocol-flag nil}, tagged-value {:protocol-inline nil, :name cognitect.transit/tagged-value, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 20, :method-params ([tag rep]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 269, :end-line 269, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tag rep])), :doc "Construct a tagged value. tag must be a string and rep can\n   be any transit encodeable value.", :test true}, t18977 {:num-fields 6, :protocols #{cognitect.transit/Object cljs.core/IMeta cljs.core/IWithMeta}, :name cognitect.transit/t18977, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :type true, :anonymous true, :column 6, :line 259, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->ListHandler {:no-doc true, :protocol-inline nil, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->ListHandler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 31, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag cognitect.transit/ListHandler, :variadic false, :max-fixed-arity 0}), :line 135, :end-line 135, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, ->VectorHandler {:no-doc true, :protocol-inline nil, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->VectorHandler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 33, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag cognitect.transit/VectorHandler, :variadic false, :max-fixed-arity 0}), :line 159, :end-line 159, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, ListHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/ListHandler, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 31, :type true, :column 19, :line 135, :record false, :end-line 135, :skip-protocol-flag nil}, ->SetHandler {:no-doc true, :protocol-inline nil, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->SetHandler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag cognitect.transit/SetHandler, :variadic false, :max-fixed-arity 0}), :line 150, :end-line 150, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, UUIDHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/UUIDHandler, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 31, :type true, :column 19, :line 168, :record false, :end-line 168, :skip-protocol-flag nil}, tagged-value? {:protocol-inline nil, :name cognitect.transit/tagged-value?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 275, :end-line 275, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit tagged value, false otherwise.", :test true}, read-handler {:protocol-inline nil, :name cognitect.transit/read-handler, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 20, :method-params ([from-rep]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 244, :end-line 244, :max-fixed-arity 1, :fn-var true, :arglists (quote ([from-rep])), :doc "Construct a read handler. Implemented as identity, exists primarily\n   for API compatiblity with transit-clj", :test true}, write {:protocol-inline nil, :name cognitect.transit/write, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 13, :method-params ([w o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 239, :end-line 239, :max-fixed-arity 2, :fn-var true, :arglists (quote ([w o])), :doc "Encode an object into a transit string given a transit writer.", :test true}, integer? {:protocol-inline nil, :name cognitect.transit/integer?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 287, :end-line 287, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is an integer value between the 53bit and 64bit\n  range, false otherwise.", :test true}, link? {:protocol-inline nil, :name cognitect.transit/link?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 364, :end-line 364, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x a transit link value, false if otherwise.", :test true}, integer {:protocol-inline nil, :name cognitect.transit/integer, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 280, :end-line 280, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a transit integer value. Returns JavaScript number if\n  in the 53bit integer range, a goog.math.Long instance if above. s\n  may be a string or a JavaScript number.", :test true}, ->t18977 {:protocol-inline nil, :protocols #{cognitect.transit/Object cljs.core/IMeta cljs.core/IWithMeta}, :name cognitect.transit/->t18977, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :method-params ([verbose-handler-fn str-rep-fn rep-fn tag-fn write-handler meta18978]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :methods ({:tag cognitect.transit/t18977, :variadic false, :max-fixed-arity 6}), :line 259, :max-fixed-arity 6, :fn-var true, :arglists (quote ([verbose-handler-fn str-rep-fn rep-fn tag-fn write-handler meta18978])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, uuid? {:protocol-inline nil, :name cognitect.transit/uuid?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 328, :end-line 328, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit UUID value, false otherwise.", :test true}, bigdec {:protocol-inline nil, :name cognitect.transit/bigdec, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 303, :end-line 303, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a big decimal from a string.", :test true}, writer {:protocol-inline nil, :name cognitect.transit/writer, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 14, :method-params ([type] [type opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 174, :end-line 174, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type] [type opts])), :doc "Return a transit writer. type maybe either :json or :json-verbose.\n  opts is a map containing a :handlers entry. :handlers is a map of\n  type constructors to handler instances.", :test true}, link {:protocol-inline nil, :name cognitect.transit/link, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 355, :end-line 355, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Construct a transit link value. x should be an IMap instance\n   containing at a minimum the following keys: :href, :rel. It\n   may optionall include :name, :render, and :prompt. :href must\n   be a transit URI, all other values are strings, and :render must\n   be either :image or :link.", :test true}, quoted? {:protocol-inline nil, :name cognitect.transit/quoted?, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 350, :end-line 350, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit quoted value, false otherwise.", :test true}, ->VectorBuilder {:no-doc true, :protocol-inline nil, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->VectorBuilder, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 33, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag cognitect.transit/VectorBuilder, :variadic false, :max-fixed-arity 0}), :line 82, :end-line 82, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, reader {:protocol-inline nil, :name cognitect.transit/reader, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 14, :method-params ([type] [type opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type] [type opts])), :doc "Return a transit reader. type may be either :json or :json-verbose.\n   opts may be a map optionally containing a :handlers entry. The value\n   of :handlers should be map from tag to a decoder function which returns\n   then in-memory representation of the semantic transit value.", :test true}, opts-merge {:no-doc true, :protocol-inline nil, :name cognitect.transit/opts-merge, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 27, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :test true}, quoted {:protocol-inline nil, :name cognitect.transit/quoted, :variadic false, :file "resources/public/js/compiled/out/cognitect/transit.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 344, :end-line 344, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Construct a quoted transit value. x should be a transit\n   encodeable value.", :test true}}, :name cognitect.transit, :doc nil, :excludes #{integer?}, :use-macros nil, :require-macros nil, :uses nil, :requires {Long goog.math.Long, eq com.cognitect.transit.eq, com.cognitect.transit.eq com.cognitect.transit.eq, ty com.cognitect.transit.types, com.cognitect.transit.types com.cognitect.transit.types, com.cognitect.transit com.cognitect.transit, t com.cognitect.transit}, :imports {Long goog.math.Long}}